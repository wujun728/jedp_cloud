<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zebra.bussiness.mapper.SpecsTypeMapper">
    
    <resultMap type="SpecsType" id="SpecsTypeResult">
        <result property="specsTypeId"    column="specs_type_id"    />
        <result property="specsType"    column="specs_type"    />
        <result property="zebraOrder"    column="zebra_order"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
        <result property="updateBy"    column="update_by"    />
    </resultMap>

    <sql id="selectSpecsTypeVo">
        select specs_type_id, specs_type, zebra_order, create_time, update_time, update_by from t_specs_type
    </sql>

    <select id="selectSpecsTypeList" parameterType="SpecsType" resultMap="SpecsTypeResult">
        <include refid="selectSpecsTypeVo"/>
        <where>  
            <if test="specsType != null  and specsType != ''"> and specs_type = #{specsType}</if>
            <if test="zebraOrder != null "> and zebra_order = #{zebraOrder}</if>
        </where>
    </select>
    
    <select id="selectSpecsTypeById" parameterType="String" resultMap="SpecsTypeResult">
        <include refid="selectSpecsTypeVo"/>
        where specs_type_id = #{specsTypeId}
    </select>
        
    <insert id="insertSpecsType" parameterType="SpecsType">
        insert into t_specs_type
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="specsTypeId != null  and specsTypeId != ''">specs_type_id,</if>
            <if test="specsType != null  and specsType != ''">specs_type,</if>
            <if test="zebraOrder != null ">zebra_order,</if>
            <if test="createTime != null ">create_time,</if>
            <if test="updateTime != null ">update_time,</if>
            <if test="updateBy != null  and updateBy != ''">update_by,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="specsTypeId != null  and specsTypeId != ''">#{specsTypeId},</if>
            <if test="specsType != null  and specsType != ''">#{specsType},</if>
            <if test="zebraOrder != null ">#{zebraOrder},</if>
            <if test="createTime != null ">#{createTime},</if>
            <if test="updateTime != null ">#{updateTime},</if>
            <if test="updateBy != null  and updateBy != ''">#{updateBy},</if>
         </trim>
    </insert>

    <update id="updateSpecsType" parameterType="SpecsType">
        update t_specs_type
        <trim prefix="SET" suffixOverrides=",">
            <if test="specsType != null  and specsType != ''">specs_type = #{specsType},</if>
            <if test="zebraOrder != null ">zebra_order = #{zebraOrder},</if>
            <if test="createTime != null ">create_time = #{createTime},</if>
            <if test="updateTime != null ">update_time = #{updateTime},</if>
            <if test="updateBy != null  and updateBy != ''">update_by = #{updateBy},</if>
        </trim>
        where specs_type_id = #{specsTypeId}
    </update>

    <delete id="deleteSpecsTypeById" parameterType="String">
        delete from t_specs_type where specs_type_id = #{specsTypeId}
    </delete>

    <delete id="deleteSpecsTypeByIds" parameterType="String">
        delete from t_specs_type where specs_type_id in 
        <foreach item="specsTypeId" collection="array" open="(" separator="," close=")">
            #{specsTypeId}
        </foreach>
    </delete>
    
</mapper>